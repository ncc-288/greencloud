/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/13b07685-030f-4f27-add4-09b7289c88fd 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float ppm;
  CloudTemperatureSensor dHT11_TEMP;
  int photo_res;
  CloudRelativeHumidity dHT11_HUMT;
  CloudRelativeHumidity soil_moisture;
  bool heating;
  bool irrigation;
  bool is_night;
  bool ventilation;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <DHT.h>

#define sens_DHT11 0                      // DHT sensor input pin location
#define DHTTYPE DHT11                     // DHT sensor type
DHT dht(sens_DHT11, DHTTYPE);             // DHT object init

int photo_pin = A5;                       // Photoresistor pin
int gas_pin = A3;                         // Gas pin
int soil_pin = A1;                        // Soil moisture pin
int heating_pin = 5;                      // Heating control pin
int ventilation_pin = 4;                  // Ventilation control pin
int irrigation_pin = 3;                   // Irrigation control pin

void readsensor_DHT();                    // DHT11 read and hum/temp control
void readsensor_photoresistor();          // Photoresistor read and night check
void readsensor_ppm();                    // PPM sensor
void readsensor_soilmoisture();           // Soil moisture sensor

void start_ventilation();
void start_heating();
void start_irrigation();
void stop_ventilation();
void stop_heating();
void stop_irrigation();

void setup() 
{
  Serial.begin(9600);
  delay(1500);
  
  // Cloud functions
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  // DHT11 sensor
  dht.begin();
  
  // Photoresistor sensor
  pinMode(photo_pin, INPUT);
  
  // Gas sensor
  pinMode(gas_pin, INPUT);

  // Soil moisture sensor
  pinMode(soil_pin, INPUT);
  
  // Actuators
  pinMode(heating_pin, OUTPUT);
  pinMode(ventilation_pin, OUTPUT);
  pinMode(irrigation_pin, OUTPUT);
  digitalWrite(irrigation_pin, irrigation);
  digitalWrite(heating_pin, heating);
  digitalWrite(ventilation_pin, ventilation);
}

void loop() 
{
  Serial.print(F("ppm="));
  Serial.print(ppm, 2);
  Serial.print(F(", temp="));
  Serial.print(dHT11_TEMP, 2);
  Serial.print(F("C, light="));
  Serial.print(photo_res);
  Serial.print(F(", hum="));
  Serial.print(dHT11_HUMT, 2);
  Serial.print(F("%, soil="));
  Serial.print(soil_moisture, 2);
  Serial.print(F("%, heating="));
  Serial.print(heating);
  Serial.print(F(", irrigation="));
  Serial.print(irrigation);
  Serial.print(F(", ventilation="));
  Serial.print(ventilation);
  Serial.print(F(", night="));
  Serial.println(is_night);

  ArduinoCloud.update();
  readsensor_photoresistor();
  readsensor_DHT();
  readsensor_ppm();
  readsensor_soilmoisture();
  
  delay(2000);
}

void readsensor_DHT()
{
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  dHT11_TEMP= t;
  dHT11_HUMT = h;
  
  // Temperature control
  if (!is_night) {
    if (t < 18 && !digitalRead(heating_pin)) { start_heating(); }
    else if (t >= 24 && digitalRead(heating_pin)) { stop_heating(); }
  } else {
    if (t < 12 && !digitalRead(heating_pin)) { start_heating(); }
    else if (t >= 16 && digitalRead(heating_pin)) { stop_heating(); }
  }
  // Humidity control
  if (h < 50 && digitalRead(ventilation_pin)) { stop_ventilation(); } 
  else if (h > 70 && !digitalRead(ventilation_pin)) { start_ventilation(); }
}

void readsensor_photoresistor()
{
  int p = analogRead(photo_pin);
  photo_res = p;
  
  if (photo_res > 512) { is_night = true; } else { is_night = false; }
}

void readsensor_ppm()
{
  int sensor_value = analogRead(gas_pin);                 // Read the sensor value
  float voltage = sensor_value * (5.0 / 1023.0);          // Convert the sensor value to voltage
  ppm = (voltage - 0.1) * 100 / 0.8;                      // Convert the voltage to ppm

}

void readsensor_soilmoisture()
{
  int soil = analogRead(soil_pin);
  float hum_per = 100 - ((soil * 100) / 1023);
  soil_moisture = hum_per;

}

void onIrrigationChange() { delay(200); digitalWrite(irrigation_pin, irrigation); }
void onHeatingChange(){ delay(200); digitalWrite(heating_pin, heating); }
void onVentilationChange() { delay(200); digitalWrite(ventilation_pin, ventilation); }

void start_ventilation()  { digitalWrite(ventilation_pin, HIGH);
                            ventilation = digitalRead(ventilation_pin); }
                            
void start_heating()      { digitalWrite(heating_pin, HIGH);
                            heating = digitalRead(heating_pin); }
                            
void start_irrigation()   { digitalWrite(irrigation_pin, HIGH);
                            irrigation = digitalRead(irrigation_pin); }
                            
void stop_ventilation()   { digitalWrite(ventilation_pin, LOW);
                            ventilation = digitalRead(ventilation_pin); }
                            
void stop_heating()       { digitalWrite(heating_pin, LOW);
                            heating = digitalRead(heating_pin);
                          }
                            
void stop_irrigation()    { digitalWrite(irrigation_pin, LOW);
                            irrigation = digitalRead(irrigation_pin); }
